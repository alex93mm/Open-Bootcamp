import { TagToken, LexerTagDefinitionContract, MustacheToken } from 'edge-lexer';
import { Parser } from '../Parser';
import { EdgeBuffer } from '../EdgeBuffer';
/**
 * The parser needs the `compile` method on every tag
 */
export interface ParserTagDefinitionContract extends LexerTagDefinitionContract {
    compile(parser: Parser, buffer: EdgeBuffer, token: TagToken): void;
}
/**
 * Loc node from Acorn
 */
export declare type AcornLoc = {
    start: {
        line: number;
        column: number;
    };
    end: {
        line: number;
        column: number;
    };
};
export declare type TagTransformer = (tag: TagToken) => void;
export declare type MustacheTransformer = (tag: MustacheToken) => void;
export declare type ClaimTagFn = (name: string) => LexerTagDefinitionContract | null;
/**
 * Parser options
 */
export declare type ParserOptions = {
    async?: boolean;
    onTag?: TagTransformer;
    onMustache?: MustacheTransformer;
    claimTag?: ClaimTagFn;
};
